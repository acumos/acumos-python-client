#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Provides a "talker" application that sends iris DataFrame protobuf messages
"""
import argparse
import time

import requests
from sklearn.datasets import load_iris

from acumos.wrapped import load_model


if __name__ == '__main__':
    '''Main'''

    parser = argparse.ArgumentParser()
    parser.add_argument("--uri", default='http://127.0.0.1:3330/transform')
    parser.add_argument("--sleep", default=5)
    parser.add_argument("--modeldir", type=str, default='model')
    parser.add_argument("--csvdata", type=str, default='')
    pargs = parser.parse_args()

    model = load_model(pargs.modeldir)  # refers to ./model dir in pwd. generated by helper script also in this dir

    if pargs.csvdata:
        import pandas as pd
        dfRaw = pd.read_csv(pargs.csvdata)
        X = dfRaw.as_matrix()
    else:
        iris = load_iris()
        X = iris.data

    # build protobuf message that model consumes
    DataFrame = model.transform.pb_input_type

    X_msg = DataFrame()
    for col, field in enumerate(DataFrame.DESCRIPTOR.fields):
        getattr(X_msg, field.name).extend(X[:, col].tolist())

    X_bytes = X_msg.SerializeToString()

    # eat errors and talk forever
    while True:
        try:
            requests.post(pargs.uri, data=X_bytes)
        except Exception as e:
            print("[ERROR] {}".format(e))
        finally:
            time.sleep(pargs.sleep)
